"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["common"],{

/***/ 3023:
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessKey: function() { return /* binding */ AccessKey; },\n/* harmony export */   AdminNotice: function() { return /* binding */ AdminNotice; },\n/* harmony export */   AndroidAppVersion: function() { return /* binding */ AndroidAppVersion; },\n/* harmony export */   AndroidBuildNumber: function() { return /* binding */ AndroidBuildNumber; },\n/* harmony export */   AndroidDeviceModel: function() { return /* binding */ AndroidDeviceModel; },\n/* harmony export */   AppVersion: function() { return /* binding */ AppVersion; },\n/* harmony export */   BaseEntity: function() { return /* binding */ BaseEntity; },\n/* harmony export */   BlacklistedUserAgent: function() { return /* binding */ BlacklistedUserAgent; },\n/* harmony export */   ChromeVersion: function() { return /* binding */ ChromeVersion; },\n/* harmony export */   Configuration: function() { return /* binding */ Configuration; },\n/* harmony export */   DeviceModel: function() { return /* binding */ DeviceModel; },\n/* harmony export */   GenerationHistory: function() { return /* binding */ GenerationHistory; },\n/* harmony export */   IOSVersion: function() { return /* binding */ IOSVersion; },\n/* harmony export */   InstagramDeviceModel: function() { return /* binding */ InstagramDeviceModel; },\n/* harmony export */   InstagramVersion: function() { return /* binding */ InstagramVersion; },\n/* harmony export */   ResolutionDpi: function() { return /* binding */ ResolutionDpi; },\n/* harmony export */   User: function() { return /* binding */ User; },\n/* harmony export */   UserGeneration: function() { return /* binding */ UserGeneration; },\n/* harmony export */   isSupabaseAvailable: function() { return /* binding */ isSupabaseAvailable; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ 1685);\n/* provided dependency */ var process = __webpack_require__(/*! process */ 7658);\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || \"\";\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || \"\";\n// Only create client if both URL and key are available\nconst supabase = supabaseUrl && supabaseAnonKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n}) : null;\nconst isSupabaseAvailable = ()=>{\n    return supabase !== null && supabaseUrl && supabaseAnonKey;\n};\n// Database entity classes\nclass BaseEntity {\n    static async list() {\n        let orderBy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"id\";\n        if (!isSupabaseAvailable()) {\n            console.warn(\"Supabase not available for \".concat(this.tableName));\n            return [];\n        }\n        console.log(\"Fetching data from \".concat(this.tableName, \"...\"));\n        const { data, error } = await supabase.from(this.tableName).select(\"*\").order(orderBy.startsWith(\"-\") ? orderBy.slice(1) : orderBy, {\n            ascending: !orderBy.startsWith(\"-\")\n        });\n        console.log(\"\".concat(this.tableName, \" data:\"), data);\n        console.log(\"\".concat(this.tableName, \" error:\"), error);\n        if (error) {\n            console.error(\"Error fetching \".concat(this.tableName, \":\"), error);\n            throw error;\n        }\n        return data || [];\n    }\n    static async create(data) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        console.log(\"Creating \".concat(this.tableName, \":\"), data);\n        const { data: result, error } = await supabase.from(this.tableName).insert(data).select().single();\n        console.log(\"\".concat(this.tableName, \" create result:\"), result);\n        console.log(\"\".concat(this.tableName, \" create error:\"), error);\n        if (error) {\n            console.error(\"Error creating \".concat(this.tableName, \":\"), error);\n            throw error;\n        }\n        return result;\n    }\n    static async update(id, data) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        console.log(\"Updating \".concat(this.tableName, \" \").concat(id, \":\"), data);\n        const { data: result, error } = await supabase.from(this.tableName).update(data).eq(\"id\", id).select().single();\n        console.log(\"\".concat(this.tableName, \" update result:\"), result);\n        console.log(\"\".concat(this.tableName, \" update error:\"), error);\n        if (error) {\n            console.error(\"Error updating \".concat(this.tableName, \":\"), error);\n            throw error;\n        }\n        return result;\n    }\n    static async delete(id) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        console.log(\"Deleting \".concat(this.tableName, \" \").concat(id));\n        const { error } = await supabase.from(this.tableName).delete().eq(\"id\", id);\n        console.log(\"\".concat(this.tableName, \" delete error:\"), error);\n        if (error) {\n            console.error(\"Error deleting \".concat(this.tableName, \":\"), error);\n            throw error;\n        }\n        return true;\n    }\n    static async filter(filters) {\n        let orderBy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"id\";\n        if (!isSupabaseAvailable()) {\n            console.warn(\"Supabase not available for \".concat(this.tableName));\n            return [];\n        }\n        console.log(\"Filtering \".concat(this.tableName, \":\"), filters);\n        let query = supabase.from(this.tableName).select(\"*\");\n        Object.entries(filters).forEach((param)=>{\n            let [key, value] = param;\n            query = query.eq(key, value);\n        });\n        const { data, error } = await query.order(orderBy.startsWith(\"-\") ? orderBy.slice(1) : orderBy, {\n            ascending: !orderBy.startsWith(\"-\")\n        });\n        console.log(\"\".concat(this.tableName, \" filter result:\"), data);\n        console.log(\"\".concat(this.tableName, \" filter error:\"), error);\n        if (error) {\n            console.error(\"Error filtering \".concat(this.tableName, \":\"), error);\n            throw error;\n        }\n        return data || [];\n    }\n}\nBaseEntity.tableName = \"\";\nclass DeviceModel extends BaseEntity {\n    static async list() {\n        let orderBy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"-created_date\";\n        return super.list(orderBy);\n    }\n    static async filter(filters) {\n        let orderBy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-created_date\";\n        return super.filter(filters, orderBy);\n    }\n}\nDeviceModel.tableName = \"device_models\";\nclass IOSVersion extends BaseEntity {\n}\nIOSVersion.tableName = \"ios_versions\";\nclass AppVersion extends BaseEntity {\n}\nAppVersion.tableName = \"app_versions\";\nclass Configuration extends BaseEntity {\n}\nConfiguration.tableName = \"configurations\";\nclass GenerationHistory extends BaseEntity {\n}\nGenerationHistory.tableName = \"generation_history\";\nclass BlacklistedUserAgent extends BaseEntity {\n}\nBlacklistedUserAgent.tableName = \"blacklisted_user_agents\";\nclass AndroidDeviceModel extends BaseEntity {\n}\nAndroidDeviceModel.tableName = \"android_device_models\";\nclass AndroidBuildNumber extends BaseEntity {\n}\nAndroidBuildNumber.tableName = \"android_build_numbers\";\nclass AndroidAppVersion extends BaseEntity {\n}\nAndroidAppVersion.tableName = \"android_app_versions\";\n// Instagram-specific database entity classes\nclass InstagramDeviceModel extends BaseEntity {\n}\nInstagramDeviceModel.tableName = \"instagram_device_models\";\nclass InstagramVersion extends BaseEntity {\n}\nInstagramVersion.tableName = \"instagram_versions\";\nclass ChromeVersion extends BaseEntity {\n}\nChromeVersion.tableName = \"chrome_versions\";\nclass ResolutionDpi extends BaseEntity {\n}\nResolutionDpi.tableName = \"resolution_dpis\";\nclass User extends BaseEntity {\n    static async me() {\n        // Check if we're on the client side\n        if (false) {}\n        // Check localStorage\n        const storedUser = localStorage.getItem(\"current_user\");\n        if (storedUser) {\n            try {\n                return JSON.parse(storedUser);\n            } catch (e) {\n                localStorage.removeItem(\"current_user\");\n            }\n        }\n        throw new Error(\"Not authenticated\");\n    }\n    static async loginWithEmail(email) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        try {\n            console.log(\"Attempting admin login with email:\", email);\n            // First check if user exists\n            const { data: existingUser, error: selectError } = await supabase.from(\"users\").select(\"*\").eq(\"email\", email).single();\n            console.log(\"Existing user:\", existingUser);\n            console.log(\"Select error:\", selectError);\n            if (existingUser) {\n                // User exists, store in localStorage (only on client side)\n                if (true) {\n                    localStorage.setItem(\"current_user\", JSON.stringify(existingUser));\n                }\n                return existingUser;\n            }\n            // User doesn't exist, create new admin user\n            if (selectError && selectError.code === \"PGRST116\") {\n                const newUserData = {\n                    email: email,\n                    is_approved: true\n                };\n                console.log(\"Creating new admin user:\", newUserData);\n                const { data: newUser, error: insertError } = await supabase.from(\"users\").insert(newUserData).select().single();\n                console.log(\"New admin user created:\", newUser);\n                console.log(\"Insert error:\", insertError);\n                if (insertError) {\n                    console.error(\"Insert error:\", insertError);\n                    throw new Error(\"Failed to create user: \".concat(insertError.message));\n                }\n                // Store new user in localStorage (only on client side)\n                if (true) {\n                    localStorage.setItem(\"current_user\", JSON.stringify(newUser));\n                }\n                return newUser;\n            }\n            throw selectError;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    }\n    static async login() {\n        if (false) {}\n        const email = prompt(\"Enter your email for testing:\");\n        if (email && email.trim()) {\n            try {\n                const user = await this.loginWithEmail(email.trim());\n                alert(\"Login successful! Welcome \".concat(user.email));\n                window.location.reload();\n            } catch (error) {\n                console.error(\"Login failed:\", error);\n                alert(\"Login failed: \" + error.message);\n            }\n        }\n    }\n    static async logout() {\n        if (true) {\n            localStorage.removeItem(\"current_user\");\n            window.location.reload();\n        }\n    }\n    // Check if user is logged in\n    static async getCurrentUser() {\n        if (false) {}\n        const storedUser = localStorage.getItem(\"current_user\");\n        if (storedUser) {\n            try {\n                return JSON.parse(storedUser);\n            } catch (e) {\n                localStorage.removeItem(\"current_user\");\n            }\n        }\n        return null;\n    }\n}\nUser.tableName = \"users\";\n// Helper function to get a random element from an array\nfunction getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n// Example usage of the updated generateUserAgent function\nasync function generateUserAgent() {\n    const deviceScaling = [\n        \"1.00\",\n        \"2.00\",\n        \"3.00\"\n    ];\n    const iosVersionUA = \"15.0\";\n    const iosVersion = {\n        webkit_version: \"605.1.15\",\n        build_number: \"19A5365\",\n        version: \"15.0\"\n    };\n    const appVersion = {\n        version: \"324.0\",\n        build_number: \"123456789\",\n        fbrv: null\n    };\n    const device = {\n        model_name: \"iPhone 12\"\n    };\n    const language = \"en_US\";\n    let userAgent = \"\";\n    if (Math.random() < 0.5) {\n        userAgent = \"Mozilla/5.0 (iPhone; CPU iPhone OS \".concat(iosVersionUA, \" like Mac OS X) AppleWebKit/\").concat(iosVersion.webkit_version, \" (KHTML, like Gecko) Mobile/\").concat(iosVersion.build_number, \" [FBAN/FBIOS;FBAV/\").concat(appVersion.version, \";FBBV/\").concat(appVersion.build_number, \";FBDV/\").concat(device.model_name, \";FBMD/iPhone;FBSN/iOS;FBSV/\").concat(iosVersion.version, \";FBSS/2;FBID/phone;FBLC/\").concat(language, \"]\");\n    } else {\n        const fbss = getRandomElement(deviceScaling.map((s)=>s.replace(\".00\", \"\")));\n        const extra = Math.random() < 0.1 ? \";FBOP/80\" : \"\";\n        // Use FBRV from database or generate random\n        let fbrv = appVersion.fbrv;\n        if (!fbrv) {\n            // Fallback to random generation if no FBRV in database\n            fbrv = Math.floor(Math.random() * 999999) + 700000000;\n        } else {\n            // Handle partial FBRV completion\n            const fbrvStr = fbrv.toString();\n            if (fbrvStr.length < 9) {\n                // Complete partial FBRV with random numbers\n                const remainingDigits = 9 - fbrvStr.length;\n                const randomPart = Math.floor(Math.random() * Math.pow(10, remainingDigits)).toString().padStart(remainingDigits, \"0\");\n                fbrv = fbrvStr + randomPart;\n            }\n        }\n        const fbrv_part = extra ? \"\" : \";FBOP/5;FBRV/\".concat(fbrv);\n        const iabmv = Math.random() < 0.9 ? \";IABMV/1\" : \"\";\n        userAgent = \"Mozilla/5.0 (iPhone; CPU iPhone OS \".concat(iosVersionUA, \" like Mac OS X) \") + \"AppleWebKit/\".concat(iosVersion.webkit_version, \" (KHTML, like Gecko) Mobile/\").concat(iosVersion.build_number, \" \") + \"[FBAN/FBIOS;FBAV/\".concat(appVersion.version, \";FBBV/\").concat(appVersion.build_number, \";FBDV/\").concat(device.model_name, \";FBMD/iPhone;FBSN/iOS;\") + \"FBSV/\".concat(iosVersion.version, \";FBSS/\").concat(fbss, \";FBID/phone;FBLC/\").concat(language).concat(extra).concat(fbrv_part).concat(iabmv, \"]\");\n    }\n    console.log(\"Generated User Agent:\", userAgent);\n    return userAgent;\n}\n// AccessKey entity class for authentication system\nclass AccessKey extends BaseEntity {\n    static async authenticate(accessKey) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        console.log(\"Authenticating with key:\", accessKey);\n        const { data: user, error } = await supabase.from(this.tableName).select(\"*\").eq(\"access_key\", accessKey).eq(\"is_active\", true).single();\n        if (error || !user) {\n            console.error(\"Authentication failed:\", error);\n            throw new Error(\"Invalid access key\");\n        }\n        // Update last login\n        await this.update(user.id, {\n            last_login: new Date().toISOString()\n        });\n        console.log(\"Authentication successful:\", user);\n        return user;\n    }\n    // Get current authenticated user from localStorage with sessionStorage fallback\n    static getCurrentUser() {\n        if (false) {}\n        // Try localStorage first\n        let storedUser = localStorage.getItem(\"authenticated_user\");\n        let storageType = \"localStorage\";\n        // If localStorage fails or is empty, try sessionStorage\n        if (!storedUser) {\n            storedUser = sessionStorage.getItem(\"authenticated_user\");\n            storageType = \"sessionStorage\";\n        }\n        if (storedUser) {\n            try {\n                const user = JSON.parse(storedUser);\n                console.log(\"[v0] Retrieved user from \".concat(storageType, \":\"), user);\n                return user;\n            } catch (e) {\n                console.log(\"[v0] Failed to parse user from \".concat(storageType, \", removing:\"), e);\n                // Clean up corrupted data from both storages\n                localStorage.removeItem(\"authenticated_user\");\n                sessionStorage.removeItem(\"authenticated_user\");\n            }\n        }\n        console.log(\"[v0] No user found in either localStorage or sessionStorage\");\n        return null;\n    }\n    static async validateCurrentUser() {\n        const currentUser = this.getCurrentUser();\n        if (!currentUser) return null;\n        try {\n            // Re-authenticate with database to get fresh data\n            const validatedUser = await this.authenticate(currentUser.access_key);\n            this.setCurrentUser(validatedUser);\n            return validatedUser;\n        } catch (error) {\n            // Key is invalid, deleted, or expired\n            this.logout();\n            return null;\n        }\n    }\n    // Store authenticated user\n    static setCurrentUser(user) {\n        if (true) {\n            localStorage.setItem(\"authenticated_user\", JSON.stringify(user));\n        }\n    }\n    // Logout user\n    static logout() {\n        if (true) {\n            localStorage.removeItem(\"authenticated_user\");\n            sessionStorage.removeItem(\"authenticated_user\");\n            window.location.href = \"/login\";\n        }\n    }\n    static isAdmin(user) {\n        const currentUser = user || this.getCurrentUser();\n        return currentUser !== null // All authenticated users are admins\n        ;\n    }\n    static canGenerate(user) {\n        const currentUser = user || this.getCurrentUser();\n        return currentUser !== null // All authenticated users can generate unlimited\n        ;\n    }\n}\nAccessKey.tableName = \"access_keys\";\nclass UserGeneration extends BaseEntity {\n    static async createGeneration(accessKey, userName, generatedData, platform) {\n        if (!isSupabaseAvailable()) {\n            throw new Error(\"Supabase not available\");\n        }\n        const generationData = {\n            access_key: accessKey,\n            user_name: userName,\n            generated_data: generatedData,\n            platform: platform,\n            created_at: new Date().toISOString()\n        };\n        return await this.create(generationData);\n    }\n    static async getUserHistory(accessKey) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n        if (!isSupabaseAvailable()) {\n            return [];\n        }\n        const { data, error } = await supabase.from(this.tableName).select(\"*\").eq(\"access_key\", accessKey).order(\"created_at\", {\n            ascending: false\n        }).limit(limit);\n        if (error) {\n            console.error(\"Error fetching user history:\", error);\n            return [];\n        }\n        return data || [];\n    }\n}\nUserGeneration.tableName = \"user_generations\";\nclass AdminNotice extends BaseEntity {\n    static async getActiveNotices(targetUser) {\n        if (!isSupabaseAvailable()) {\n            return [];\n        }\n        let query = supabase.from(this.tableName).select(\"*\").eq(\"is_active\", true);\n        // Get notices for specific user or global notices\n        if (targetUser) {\n            query = query.or(\"target_user.eq.\".concat(targetUser, \",target_user.is.null\"));\n        } else {\n            query = query.is(\"target_user\", null);\n        }\n        // Filter out expired notices\n        query = query.or(\"expires_at.is.null,expires_at.gt.\".concat(new Date().toISOString()));\n        const { data, error } = await query.order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching notices:\", error);\n            return [];\n        }\n        return data || [];\n    }\n    static async createNotice(title, message, targetUser, expiresAt) {\n        const noticeData = {\n            title,\n            message,\n            target_user: targetUser || null,\n            expires_at: expiresAt || null,\n            is_active: true,\n            created_at: new Date().toISOString()\n        };\n        return await this.create(noticeData);\n    }\n}\nAdminNotice.tableName = \"admin_notices\";\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3023\n"));

/***/ }),

/***/ 3622:
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: function() { return /* binding */ cn; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ 8099);\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ 8543);\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFDSjtBQUVqQyxTQUFTRTtJQUFHO1FBQUdDLE9BQUgsdUJBQXVCOztJQUN4QyxPQUFPRix1REFBT0EsQ0FBQ0QsMENBQUlBLENBQUNHO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi91dGlscy50cz9mNzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgQ2xhc3NWYWx1ZSwgY2xzeCB9IGZyb20gXCJjbHN4XCJcbmltcG9ydCB7IHR3TWVyZ2UgfSBmcm9tIFwidGFpbHdpbmQtbWVyZ2VcIlxuXG5leHBvcnQgZnVuY3Rpb24gY24oLi4uaW5wdXRzOiBDbGFzc1ZhbHVlW10pIHtcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKVxufVxuIl0sIm5hbWVzIjpbImNsc3giLCJ0d01lcmdlIiwiY24iLCJpbnB1dHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3622\n"));

/***/ })

}]);